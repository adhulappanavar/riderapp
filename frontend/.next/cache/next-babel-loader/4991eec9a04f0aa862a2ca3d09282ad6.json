{"ast":null,"code":"var _jsxFileName = \"/Users/anidhula/learn/strapi/strapi-deliveroo/frontend2/pages/ridersgqlserver.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql } from \"@apollo/client\";\nconst MyRiderQuery = gql`\nquery qriders {\n  riders\n  \t{\n      id\n      Name\n      orders { id\n        OrderStatus}\n  }\n}\n`;\n\nfunction Riders({\n  riders\n}) {\n  return __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, riders.map(rider => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, rider.Name, \" ---- \", rider.Title, \" \"), __jsx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }\n  }, JSON.stringify(rider, null, 2)))));\n}\n\nexport const getServerSideProps = async () => {\n  const res = await fetch('http://localhost:1337/Riders');\n  const riders = await res.json();\n  console.log(riders);\n  return {\n    props: {\n      riders\n    }\n  };\n};","map":{"version":3,"sources":["/Users/anidhula/learn/strapi/strapi-deliveroo/frontend2/pages/ridersgqlserver.tsx"],"names":["gql","MyRiderQuery","Riders","riders","map","rider","Name","Title","JSON","stringify","getServerSideProps","res","fetch","json","console","log","props"],"mappings":";;;AAAA,SAAmBA,GAAnB,QAA8B,gBAA9B;AAcA,MAAMC,YAAY,GAAGD,GAAI;;;;;;;;;;CAAzB;;AAYA,SAASE,MAAT,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA4B;AAC1B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MAAM,CAACC,GAAP,CAAYC,KAAD,IACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACC,IAAX,YAAuBD,KAAK,CAACE,KAA7B,MADA,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,IAAI,CAACC,SAAL,CAAeJ,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAN,CAFD,CADD,CADH,CADF;AAWD;;AAED,OAAO,MAAMK,kBAAkB,GAAG,YAAY;AAC5C,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,8BAAD,CAAvB;AACA,QAAMT,MAAe,GAAG,MAAMQ,GAAG,CAACE,IAAJ,EAA9B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAZ;AAEA,SAAO;AACLa,IAAAA,KAAK,EAAE;AACLb,MAAAA;AADK;AADF,GAAP;AAKD,CAXM","sourcesContent":["import { useQuery, gql } from \"@apollo/client\";\nimport { initializeApollo } from \"src/apollo\";\n\ntype Rider = {\n  Name: string\n  Title : string\n  orders : Order[]\n}\n\ntype Order = {\n  orderStatus: string\n\n}\n\nconst MyRiderQuery = gql`\nquery qriders {\n  riders\n  \t{\n      id\n      Name\n      orders { id\n        OrderStatus}\n  }\n}\n`;\n\nfunction Riders({ riders }) {\n  return (\n    <ul>\n      {riders.map((rider) => (\n        <div>\n        <li>{rider.Name} ---- {rider.Title} </li>\n         <pre>{JSON.stringify(rider, null, 2)}</pre>\n        </div>\n\n      ))}\n    </ul>\n  )\n}\n\nexport const getServerSideProps = async () => {\n  const res = await fetch('http://localhost:1337/Riders')\n  const riders: Rider[] = await res.json()\n\n  console.log(riders)\n\n  return {\n    props: {\n      riders,\n    },\n  }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}