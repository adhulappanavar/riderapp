{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/anidhula/learn/strapi/strapi-deliveroo/frontend2/pages/ridersgqlserver.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery qriders {\\n  riders\\n  \\t{\\n      id\\n      Name\\n      orders { id\\n        OrderStatus}\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from \"@apollo/client\";\nvar MyRiderQuery = gql(_templateObject());\n\nfunction RidersGQLServerSideProps(_ref) {\n  var _this = this;\n\n  var riders = _ref.riders;\n  return __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, riders.map(function (rider) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, rider.Name, \" ---- \", rider.Title, \" \"), __jsx(\"pre\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 10\n      }\n    }, JSON.stringify(rider, null, 2)));\n  }));\n}\n\n_c = RidersGQLServerSideProps;\nexport var __N_SSP = true;\nexport default RidersGQLServerSideProps;\n\nvar _c;\n\n$RefreshReg$(_c, \"RidersGQLServerSideProps\");","map":{"version":3,"sources":["/Users/anidhula/learn/strapi/strapi-deliveroo/frontend2/pages/ridersgqlserver.tsx"],"names":["gql","MyRiderQuery","RidersGQLServerSideProps","riders","map","rider","Name","Title","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;AAAA,SAAmBA,GAAnB,QAA8B,gBAA9B;AAcA,IAAMC,YAAY,GAAGD,GAAH,mBAAlB;;AAYA,SAASE,wBAAT,OAA8C;AAAA;;AAAA,MAAVC,MAAU,QAAVA,MAAU;AAC5C,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MAAM,CAACC,GAAP,CAAW,UAACC,KAAD;AAAA,WACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,KAAK,CAACC,IAAX,YAAuBD,KAAK,CAACE,KAA7B,MADA,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMC,IAAI,CAACC,SAAL,CAAeJ,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAN,CAFD,CADU;AAAA,GAAX,CADH,CADF;AAWD;;KAZQH,wB;;AA2BT,eAAeA,wBAAf","sourcesContent":["import { useQuery, gql } from \"@apollo/client\";\nimport { initializeApollo } from \"src/apollo\";\n\ntype Rider = {\n  Name: string\n  Title : string\n  orders : Order[]\n}\n\ntype Order = {\n  orderStatus: string\n\n}\n\nconst MyRiderQuery = gql`\nquery qriders {\n  riders\n  \t{\n      id\n      Name\n      orders { id\n        OrderStatus}\n  }\n}\n`;\n\nfunction RidersGQLServerSideProps({ riders }) {\n  return (\n    <ul>\n      {riders.map((rider) => (\n        <div>\n        <li>{rider.Name} ---- {rider.Title} </li>\n         <pre>{JSON.stringify(rider, null, 2)}</pre>\n        </div>\n\n      ))}\n    </ul>\n  )\n}\n\nexport const getServerSideProps = async () => {\n  const res = await fetch('http://localhost:1337/Riders')\n  const riders: Rider[] = await res.json()\n\n  console.log(riders)\n\n  return {\n    props: {\n      riders,\n    },\n  }\n}\n\nexport default RidersGQLServerSideProps"]},"metadata":{},"sourceType":"module"}