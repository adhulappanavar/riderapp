{"ast":null,"code":"import { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { useMemo } from \"react\";\nlet apolloClient;\n\nfunction createIsomorphicLink() {\n  const {\n    HttpLink\n  } = require(\"@apollo/client/link/http\");\n\n  return new HttpLink({\n    uri: \"http://localhost:1337/graphql\"\n  });\n}\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: createIsomorphicLink(),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2, _apolloClient3;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient();\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n\n  if (true) return _apolloClient;\n  apolloClient = (_apolloClient3 = apolloClient) !== null && _apolloClient3 !== void 0 ? _apolloClient3 : _apolloClient;\n  return apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/Users/anidhula/learn/strapi/strapi-deliveroo/frontend2/src/apollo.ts"],"names":["ApolloClient","InMemoryCache","useMemo","apolloClient","createIsomorphicLink","HttpLink","require","uri","createApolloClient","ssrMode","link","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":"AAAA,SACEA,YADF,EAEEC,aAFF,QAIO,gBAJP;AAKA,SAASC,OAAT,QAAwB,OAAxB;AAEA,IAAIC,YAAJ;;AAEA,SAASC,oBAAT,GAAgC;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAeC,OAAO,CAAC,0BAAD,CAA5B;;AACA,SAAO,IAAID,QAAJ,CAAa;AAAEE,IAAAA,GAAG,EAAE;AAAP,GAAb,CAAP;AACH;;AAED,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIR,YAAJ,CAAiB;AACtBS,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAEN,oBAAoB,EAFJ;AAGtBO,IAAAA,KAAK,EAAE,IAAIV,aAAJ;AAHe,GAAjB,CAAP;AAKD;;AAED,OAAO,SAASW,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGX,YAAH,2DAAmBK,kBAAkB,EAAxD;;AAEA,MAAIK,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACD;;AAED,YAAmC,OAAOC,aAAP;AACnCX,EAAAA,YAAY,qBAAGA,YAAH,2DAAmBW,aAA/B;AAEA,SAAOX,YAAP;AACD;AAED,OAAO,SAASa,SAAT,CAAmBH,YAAnB,EAAiC;AACtC,QAAMI,KAAK,GAAGf,OAAO,CAAC,MAAMU,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from \"@apollo/client\";\nimport { useMemo } from \"react\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject>;\n\nfunction createIsomorphicLink() {\n    const { HttpLink } = require(\"@apollo/client/link/http\");\n    return new HttpLink({ uri: \"http://localhost:1337/graphql\" });\n}\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: createIsomorphicLink(),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient();\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n\n  if (typeof window === \"undefined\") return _apolloClient;\n  apolloClient = apolloClient ?? _apolloClient;\n\n  return apolloClient;\n}\n\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}